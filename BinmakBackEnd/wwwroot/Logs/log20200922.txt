2020-09-22 07:15:44.435 +02:00 [INF] User profile is available. Using 'C:\Users\Admin\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-09-22 07:15:50.589 +02:00 [INF] Application started. Press Ctrl+C to shut down.
2020-09-22 07:15:50.590 +02:00 [INF] Hosting environment: Development
2020-09-22 07:15:50.590 +02:00 [INF] Content root path: C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd
2020-09-22 07:15:50.901 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/weatherforecast  
2020-09-22 07:15:50.901 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/swagger/index.html  
2020-09-22 07:15:50.916 +02:00 [WRN] Failed to determine the https port for redirect.
2020-09-22 07:15:51.165 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 07:15:51.337 +02:00 [INF] Route matched with {action = "Get", controller = "WeatherForecast", area = ""}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[BinmakBackEnd.WeatherForecast] Get() on controller BinmakBackEnd.Controllers.WeatherForecastController (BinmakBackEnd).
2020-09-22 07:15:51.385 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.WeatherForecast[]'.
2020-09-22 07:15:51.614 +02:00 [INF] Request finished in 680.8539ms 200 text/html;charset=utf-8
2020-09-22 07:15:52.504 +02:00 [INF] Executed action BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd) in 1133.2755ms
2020-09-22 07:15:52.507 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 07:15:52.507 +02:00 [INF] Request finished in 1611.5878ms 200 application/json; charset=utf-8
2020-09-22 07:15:53.574 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/swagger/v1/swagger.json  
2020-09-22 07:15:54.276 +02:00 [INF] Request finished in 702.407ms 200 application/json;charset=utf-8
2020-09-22 07:17:08.737 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 07:17:08.747 +02:00 [INF] CORS policy execution successful.
2020-09-22 07:17:08.749 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 07:17:08.795 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 07:17:11.683 +02:00 [WRN] No type was specified for the decimal column 'BPFI' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:17:11.684 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:17:11.684 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:17:11.684 +02:00 [WRN] No type was specified for the decimal column 'BPFO' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:17:11.684 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:17:11.684 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:17:11.684 +02:00 [WRN] No type was specified for the decimal column 'BSF' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:17:11.684 +02:00 [WRN] No type was specified for the decimal column 'BSFAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:17:11.684 +02:00 [WRN] No type was specified for the decimal column 'BSFAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:17:11.684 +02:00 [WRN] No type was specified for the decimal column 'RmsAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:17:11.684 +02:00 [WRN] No type was specified for the decimal column 'RmsAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:17:11.684 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:17:11.685 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:17:11.744 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 07:17:16.643 +02:00 [INF] Executed DbCommand (404ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__Subtract_TotalSeconds_1='?' (DbType = Double), @__Subtract_TotalSeconds_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [m0].[Id], [m0].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [MachineTypes] AS [m0] ON [m].[MachineTypeId] = [m0].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND (CAST([s].[TimeStamp] AS float) >= @__Subtract_TotalSeconds_1)) AND (CAST([s].[TimeStamp] AS float) <= @__Subtract_TotalSeconds_2)
ORDER BY [s].[TimeStamp]
2020-09-22 07:19:01.128 +02:00 [INF] User profile is available. Using 'C:\Users\Admin\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-09-22 07:19:01.699 +02:00 [INF] Application started. Press Ctrl+C to shut down.
2020-09-22 07:19:01.706 +02:00 [INF] Hosting environment: Development
2020-09-22 07:19:01.706 +02:00 [INF] Content root path: C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd
2020-09-22 07:19:01.745 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/weatherforecast  
2020-09-22 07:19:01.752 +02:00 [WRN] Failed to determine the https port for redirect.
2020-09-22 07:19:01.816 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 07:19:01.846 +02:00 [INF] Route matched with {action = "Get", controller = "WeatherForecast", area = ""}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[BinmakBackEnd.WeatherForecast] Get() on controller BinmakBackEnd.Controllers.WeatherForecastController (BinmakBackEnd).
2020-09-22 07:19:01.855 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.WeatherForecast[]'.
2020-09-22 07:19:02.027 +02:00 [INF] Executed action BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd) in 171.8826ms
2020-09-22 07:19:02.029 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 07:19:02.033 +02:00 [INF] Request finished in 293.5032ms 200 application/json; charset=utf-8
2020-09-22 07:19:02.267 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/favicon.ico  
2020-09-22 07:19:02.317 +02:00 [INF] Request finished in 50.4168ms 404 
2020-09-22 07:22:36.349 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/swagger/index.html  
2020-09-22 07:22:36.513 +02:00 [INF] Request finished in 164.2699ms 200 text/html;charset=utf-8
2020-09-22 07:22:36.849 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/swagger/v1/swagger.json  
2020-09-22 07:22:37.328 +02:00 [INF] Request finished in 478.4197ms 200 application/json;charset=utf-8
2020-09-22 07:22:59.893 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 07:22:59.900 +02:00 [INF] CORS policy execution successful.
2020-09-22 07:22:59.901 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 07:22:59.935 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 07:23:01.456 +02:00 [WRN] No type was specified for the decimal column 'BPFI' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:23:01.456 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:23:01.456 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:23:01.456 +02:00 [WRN] No type was specified for the decimal column 'BPFO' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:23:01.456 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:23:01.456 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:23:01.456 +02:00 [WRN] No type was specified for the decimal column 'BSF' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:23:01.456 +02:00 [WRN] No type was specified for the decimal column 'BSFAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:23:01.456 +02:00 [WRN] No type was specified for the decimal column 'BSFAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:23:01.456 +02:00 [WRN] No type was specified for the decimal column 'RmsAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:23:01.456 +02:00 [WRN] No type was specified for the decimal column 'RmsAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:23:01.456 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:23:01.456 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:23:01.498 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 07:23:02.734 +02:00 [INF] Executed DbCommand (168ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__Subtract_TotalSeconds_1='?' (DbType = Double), @__Subtract_TotalSeconds_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND (CAST([s].[TimeStamp] AS float) >= @__Subtract_TotalSeconds_1)) AND (CAST([s].[TimeStamp] AS float) <= @__Subtract_TotalSeconds_2)
ORDER BY [s].[TimeStamp]
2020-09-22 07:23:28.343 +02:00 [ERR] Failed executing DbCommand (67ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__Subtract_TotalSeconds_1='?' (DbType = Double), @__Subtract_TotalSeconds_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND (CAST([s].[TimeStamp] AS float) >= @__Subtract_TotalSeconds_1)) AND (CAST([s].[TimeStamp] AS float) <= @__Subtract_TotalSeconds_2)
ORDER BY [s].[TimeStamp]
2020-09-22 07:23:28.708 +02:00 [ERR] An exception occurred while iterating over the results of a query for context type 'BinmakAPI.Data.BinmakDbContext'.
System.InvalidOperationException: There is already an open DataReader associated with this Command which must be closed first.
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds.ValidateConnectionForExecute(SqlCommand command)
   at Microsoft.Data.SqlClient.SqlConnection.ValidateConnectionForExecute(String method, SqlCommand command)
   at Microsoft.Data.SqlClient.SqlCommand.ValidateCommand(Boolean isAsync, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at System.Data.Common.DbCommand.ExecuteReader()
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.InitializeReader(DbContext _, Boolean result)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
System.InvalidOperationException: There is already an open DataReader associated with this Command which must be closed first.
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds.ValidateConnectionForExecute(SqlCommand command)
   at Microsoft.Data.SqlClient.SqlConnection.ValidateConnectionForExecute(String method, SqlCommand command)
   at Microsoft.Data.SqlClient.SqlCommand.ValidateCommand(Boolean isAsync, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at System.Data.Common.DbCommand.ExecuteReader()
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.InitializeReader(DbContext _, Boolean result)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
2020-09-22 07:24:04.692 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 64756.8363ms
2020-09-22 07:24:04.705 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 07:24:04.707 +02:00 [ERR] An unhandled exception has occurred while executing the request.
System.InvalidOperationException: Sequence contains no elements
   at System.Linq.ThrowHelper.ThrowNoElementsException()
   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)
   at System.Linq.Queryable.First[TSource](IQueryable`1 source)
   at BinmakBackEnd.Areas.AssetHealth.Models.Respositories.SensorDataRepository.FindByMachineId(SearchMachineRequest request) in C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd\Areas\AssetHealth\Models\Respositories\SensorDataRepository.cs:line 27
   at BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId(SearchMachineRequest request) in C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd\Areas\AssetHealth\Controllers\SensorDataController.cs:line 23
   at lambda_method(Closure , Object , Object[] )
   at Microsoft.Extensions.Internal.ObjectMethodExecutor.Execute(Object target, Object[] parameters)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2020-09-22 07:24:05.141 +02:00 [INF] Request finished in 65249.4493ms 500 text/plain
2020-09-22 07:24:16.191 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 07:24:16.199 +02:00 [INF] CORS policy execution successful.
2020-09-22 07:24:16.200 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 07:24:16.200 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 07:24:16.259 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 07:24:33.942 +02:00 [INF] Executed DbCommand (130ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__Subtract_TotalSeconds_1='?' (DbType = Double), @__Subtract_TotalSeconds_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND (CAST([s].[TimeStamp] AS float) >= @__Subtract_TotalSeconds_1)) AND (CAST([s].[TimeStamp] AS float) <= @__Subtract_TotalSeconds_2)
ORDER BY [s].[TimeStamp]
2020-09-22 07:34:16.826 +02:00 [INF] User profile is available. Using 'C:\Users\Admin\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-09-22 07:34:18.923 +02:00 [INF] Application started. Press Ctrl+C to shut down.
2020-09-22 07:34:18.926 +02:00 [INF] Hosting environment: Development
2020-09-22 07:34:18.926 +02:00 [INF] Content root path: C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd
2020-09-22 07:34:19.110 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/weatherforecast  
2020-09-22 07:34:19.127 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 07:34:19.136 +02:00 [WRN] Failed to determine the https port for redirect.
2020-09-22 07:34:19.209 +02:00 [INF] CORS policy execution successful.
2020-09-22 07:34:19.223 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 07:34:19.226 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 07:34:19.332 +02:00 [INF] Route matched with {action = "Get", controller = "WeatherForecast", area = ""}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[BinmakBackEnd.WeatherForecast] Get() on controller BinmakBackEnd.Controllers.WeatherForecastController (BinmakBackEnd).
2020-09-22 07:34:19.343 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.WeatherForecast[]'.
2020-09-22 07:34:19.363 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 07:34:19.914 +02:00 [INF] Executed action BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd) in 568.2502ms
2020-09-22 07:34:19.916 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 07:34:19.997 +02:00 [INF] Request finished in 892.5677ms 200 application/json; charset=utf-8
2020-09-22 07:34:21.172 +02:00 [WRN] No type was specified for the decimal column 'BPFI' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:34:21.172 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:34:21.172 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:34:21.172 +02:00 [WRN] No type was specified for the decimal column 'BPFO' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:34:21.172 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:34:21.172 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:34:21.172 +02:00 [WRN] No type was specified for the decimal column 'BSF' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:34:21.172 +02:00 [WRN] No type was specified for the decimal column 'BSFAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:34:21.172 +02:00 [WRN] No type was specified for the decimal column 'BSFAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:34:21.173 +02:00 [WRN] No type was specified for the decimal column 'RmsAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:34:21.173 +02:00 [WRN] No type was specified for the decimal column 'RmsAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:34:21.173 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:34:21.174 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:34:21.233 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 07:34:22.967 +02:00 [INF] Executed DbCommand (256ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__Subtract_TotalSeconds_1='?' (DbType = Double), @__Subtract_TotalSeconds_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [SensorData] AS [s]
        WHERE (([s].[MachineId] = @__request_MachineId_0) AND (CAST([s].[TimeStamp] AS float) >= @__Subtract_TotalSeconds_1)) AND (CAST([s].[TimeStamp] AS float) <= @__Subtract_TotalSeconds_2)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2020-09-22 07:34:22.992 +02:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2020-09-22 07:34:23.031 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 3667.563ms
2020-09-22 07:34:23.031 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 07:34:23.038 +02:00 [INF] Request finished in 3933.5997ms 404 text/plain; charset=utf-8
2020-09-22 07:36:25.034 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 07:36:25.043 +02:00 [INF] CORS policy execution successful.
2020-09-22 07:36:25.045 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 07:36:25.048 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 07:36:25.108 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 07:36:25.347 +02:00 [INF] Executed DbCommand (232ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__Subtract_TotalSeconds_1='?' (DbType = Double), @__Subtract_TotalSeconds_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [SensorData] AS [s]
        WHERE (([s].[MachineId] = @__request_MachineId_0) AND (CAST([s].[TimeStamp] AS float) >= @__Subtract_TotalSeconds_1)) AND (CAST([s].[TimeStamp] AS float) <= @__Subtract_TotalSeconds_2)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2020-09-22 07:36:25.349 +02:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2020-09-22 07:36:25.350 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 301.5569ms
2020-09-22 07:36:25.350 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 07:36:25.350 +02:00 [INF] Request finished in 320.2806ms 404 text/plain; charset=utf-8
2020-09-22 07:36:34.517 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 07:36:34.519 +02:00 [INF] CORS policy execution successful.
2020-09-22 07:36:34.520 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 07:36:34.521 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 07:36:34.546 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 07:36:59.349 +02:00 [INF] Executed DbCommand (66ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__Subtract_TotalSeconds_1='?' (DbType = Double), @__Subtract_TotalSeconds_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [SensorData] AS [s]
        WHERE (([s].[MachineId] = @__request_MachineId_0) AND (CAST([s].[TimeStamp] AS float) >= @__Subtract_TotalSeconds_1)) AND (CAST([s].[TimeStamp] AS float) <= @__Subtract_TotalSeconds_2)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2020-09-22 07:36:59.350 +02:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2020-09-22 07:36:59.351 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 24829.8777ms
2020-09-22 07:36:59.351 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 07:36:59.352 +02:00 [INF] Request finished in 24835.8593ms 404 text/plain; charset=utf-8
2020-09-22 07:42:57.725 +02:00 [INF] User profile is available. Using 'C:\Users\Admin\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-09-22 07:42:58.478 +02:00 [INF] Application started. Press Ctrl+C to shut down.
2020-09-22 07:42:58.479 +02:00 [INF] Hosting environment: Development
2020-09-22 07:42:58.479 +02:00 [INF] Content root path: C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd
2020-09-22 07:42:58.557 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/weatherforecast  
2020-09-22 07:42:58.570 +02:00 [WRN] Failed to determine the https port for redirect.
2020-09-22 07:42:58.657 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 07:42:58.689 +02:00 [INF] Route matched with {action = "Get", controller = "WeatherForecast", area = ""}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[BinmakBackEnd.WeatherForecast] Get() on controller BinmakBackEnd.Controllers.WeatherForecastController (BinmakBackEnd).
2020-09-22 07:42:58.696 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.WeatherForecast[]'.
2020-09-22 07:42:58.971 +02:00 [INF] Executed action BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd) in 276.7772ms
2020-09-22 07:42:58.973 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 07:42:58.987 +02:00 [INF] Request finished in 439.0783ms 200 application/json; charset=utf-8
2020-09-22 07:42:59.962 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 07:42:59.967 +02:00 [INF] CORS policy execution successful.
2020-09-22 07:42:59.969 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 07:42:59.983 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 07:43:01.059 +02:00 [WRN] No type was specified for the decimal column 'BPFI' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:43:01.060 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:43:01.060 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:43:01.060 +02:00 [WRN] No type was specified for the decimal column 'BPFO' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:43:01.060 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:43:01.060 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:43:01.060 +02:00 [WRN] No type was specified for the decimal column 'BSF' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:43:01.060 +02:00 [WRN] No type was specified for the decimal column 'BSFAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:43:01.060 +02:00 [WRN] No type was specified for the decimal column 'BSFAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:43:01.060 +02:00 [WRN] No type was specified for the decimal column 'RmsAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:43:01.060 +02:00 [WRN] No type was specified for the decimal column 'RmsAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:43:01.060 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:43:01.060 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:43:01.103 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 07:43:14.771 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 14788.2179ms
2020-09-22 07:43:14.783 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 07:43:14.791 +02:00 [ERR] An unhandled exception has occurred while executing the request.
System.InvalidOperationException: The LINQ expression 'DbSet<SensorData>
    .Where(s => s.MachineId == __request_MachineId_0 && s.TimeStamp
        .UnixTimeStampToDateTime() >= __request_DateFrom_1 && s.TimeStamp
        .UnixTimeStampToDateTime() <= __request_DateTo_2)' could not be translated. Either rewrite the query in a form that can be translated, or switch to client evaluation explicitly by inserting a call to either AsEnumerable(), AsAsyncEnumerable(), ToList(), or ToListAsync(). See https://go.microsoft.com/fwlink/?linkid=2101038 for more information.
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.<VisitMethodCall>g__CheckTranslated|8_0(ShapedQueryExpression translated, <>c__DisplayClass8_0& )
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)
   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)
   at System.Linq.Queryable.Any[TSource](IQueryable`1 source)
   at BinmakBackEnd.Areas.AssetHealth.Models.Respositories.SensorDataRepository.FindByMachineId(SearchMachineRequest request) in C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd\Areas\AssetHealth\Models\Respositories\SensorDataRepository.cs:line 27
   at BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId(SearchMachineRequest request) in C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd\Areas\AssetHealth\Controllers\SensorDataController.cs:line 23
   at lambda_method(Closure , Object , Object[] )
   at Microsoft.Extensions.Internal.ObjectMethodExecutor.Execute(Object target, Object[] parameters)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2020-09-22 07:43:15.366 +02:00 [INF] Request finished in 15406.1343ms 500 text/plain
2020-09-22 07:44:22.411 +02:00 [INF] User profile is available. Using 'C:\Users\Admin\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-09-22 07:44:22.940 +02:00 [INF] Application started. Press Ctrl+C to shut down.
2020-09-22 07:44:22.941 +02:00 [INF] Hosting environment: Development
2020-09-22 07:44:22.941 +02:00 [INF] Content root path: C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd
2020-09-22 07:44:23.014 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/weatherforecast  
2020-09-22 07:44:23.024 +02:00 [WRN] Failed to determine the https port for redirect.
2020-09-22 07:44:23.094 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 07:44:23.124 +02:00 [INF] Route matched with {action = "Get", controller = "WeatherForecast", area = ""}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[BinmakBackEnd.WeatherForecast] Get() on controller BinmakBackEnd.Controllers.WeatherForecastController (BinmakBackEnd).
2020-09-22 07:44:23.133 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.WeatherForecast[]'.
2020-09-22 07:44:23.417 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 07:44:23.446 +02:00 [INF] CORS policy execution successful.
2020-09-22 07:44:23.446 +02:00 [INF] Executed action BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd) in 314.8525ms
2020-09-22 07:44:23.447 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 07:44:23.449 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 07:44:23.457 +02:00 [INF] Request finished in 449.8674ms 200 application/json; charset=utf-8
2020-09-22 07:44:23.466 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 07:44:24.660 +02:00 [WRN] No type was specified for the decimal column 'BPFI' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:44:24.661 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:44:24.661 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:44:24.661 +02:00 [WRN] No type was specified for the decimal column 'BPFO' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:44:24.661 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:44:24.661 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:44:24.661 +02:00 [WRN] No type was specified for the decimal column 'BSF' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:44:24.661 +02:00 [WRN] No type was specified for the decimal column 'BSFAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:44:24.661 +02:00 [WRN] No type was specified for the decimal column 'BSFAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:44:24.661 +02:00 [WRN] No type was specified for the decimal column 'RmsAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:44:24.661 +02:00 [WRN] No type was specified for the decimal column 'RmsAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:44:24.661 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:44:24.661 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:44:24.710 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 07:51:10.383 +02:00 [INF] User profile is available. Using 'C:\Users\Admin\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-09-22 07:51:10.909 +02:00 [INF] Application started. Press Ctrl+C to shut down.
2020-09-22 07:51:10.909 +02:00 [INF] Hosting environment: Development
2020-09-22 07:51:10.910 +02:00 [INF] Content root path: C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd
2020-09-22 07:51:10.952 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/weatherforecast  
2020-09-22 07:51:10.962 +02:00 [WRN] Failed to determine the https port for redirect.
2020-09-22 07:51:11.035 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 07:51:11.060 +02:00 [INF] Route matched with {action = "Get", controller = "WeatherForecast", area = ""}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[BinmakBackEnd.WeatherForecast] Get() on controller BinmakBackEnd.Controllers.WeatherForecastController (BinmakBackEnd).
2020-09-22 07:51:11.068 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.WeatherForecast[]'.
2020-09-22 07:51:11.324 +02:00 [INF] Executed action BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd) in 258.2938ms
2020-09-22 07:51:11.327 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 07:51:11.330 +02:00 [INF] Request finished in 383.1624ms 200 application/json; charset=utf-8
2020-09-22 07:51:17.577 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 07:51:17.584 +02:00 [INF] CORS policy execution successful.
2020-09-22 07:51:17.589 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 07:51:17.604 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 07:51:18.661 +02:00 [WRN] No type was specified for the decimal column 'BPFI' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:51:18.661 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:51:18.661 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:51:18.661 +02:00 [WRN] No type was specified for the decimal column 'BPFO' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:51:18.661 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:51:18.661 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:51:18.661 +02:00 [WRN] No type was specified for the decimal column 'BSF' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:51:18.661 +02:00 [WRN] No type was specified for the decimal column 'BSFAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:51:18.661 +02:00 [WRN] No type was specified for the decimal column 'BSFAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:51:18.661 +02:00 [WRN] No type was specified for the decimal column 'RmsAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:51:18.661 +02:00 [WRN] No type was specified for the decimal column 'RmsAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:51:18.661 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:51:18.661 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 07:51:18.698 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 07:51:20.707 +02:00 [INF] Executed DbCommand (172ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 07:57:34.318 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.Areas.AssetHealth.Models.Local.MachineDetail'.
2020-09-22 07:58:31.403 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 433797.9972ms
2020-09-22 07:58:31.404 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 07:58:31.405 +02:00 [ERR] An unhandled exception has occurred while executing the request.
System.ArgumentNullException: Value cannot be null. (Parameter 'value')
   at Newtonsoft.Json.JsonConvert.DeserializeObject(String value, Type type, JsonSerializerSettings settings)
   at Newtonsoft.Json.JsonConvert.DeserializeObject[T](String value, JsonSerializerSettings settings)
   at BinmakBackEnd.Areas.AssetHealth.Models.Respositories.SensorDataRepository.<>c.<FindByMachineId>b__2_6(SensorData a) in C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd\Areas\AssetHealth\Models\Respositories\SensorDataRepository.cs:line 36
   at System.Linq.Enumerable.SelectListIterator`2.MoveNext()
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.Serialize(JsonWriter jsonWriter, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|29_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2020-09-22 07:58:31.836 +02:00 [INF] Request finished in 434261.2555ms 500 text/plain
2020-09-22 07:58:44.173 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 07:58:44.182 +02:00 [INF] CORS policy execution successful.
2020-09-22 07:58:44.183 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 07:58:44.183 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 07:58:44.222 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 07:58:44.661 +02:00 [INF] Executed DbCommand (80ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:01:43.029 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.Areas.AssetHealth.Models.Local.MachineDetail'.
2020-09-22 08:07:30.158 +02:00 [INF] User profile is available. Using 'C:\Users\Admin\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-09-22 08:07:30.641 +02:00 [INF] Application started. Press Ctrl+C to shut down.
2020-09-22 08:07:30.643 +02:00 [INF] Hosting environment: Development
2020-09-22 08:07:30.644 +02:00 [INF] Content root path: C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd
2020-09-22 08:07:30.694 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/weatherforecast  
2020-09-22 08:07:30.700 +02:00 [WRN] Failed to determine the https port for redirect.
2020-09-22 08:07:30.778 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 08:07:30.804 +02:00 [INF] Route matched with {action = "Get", controller = "WeatherForecast", area = ""}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[BinmakBackEnd.WeatherForecast] Get() on controller BinmakBackEnd.Controllers.WeatherForecastController (BinmakBackEnd).
2020-09-22 08:07:30.812 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.WeatherForecast[]'.
2020-09-22 08:07:31.060 +02:00 [INF] Executed action BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd) in 246.4643ms
2020-09-22 08:07:31.062 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 08:07:31.068 +02:00 [INF] Request finished in 379.3045ms 200 application/json; charset=utf-8
2020-09-22 08:07:37.820 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 08:07:37.824 +02:00 [INF] CORS policy execution successful.
2020-09-22 08:07:37.825 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 08:07:37.837 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 08:07:38.772 +02:00 [WRN] No type was specified for the decimal column 'BPFI' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 08:07:38.772 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 08:07:38.772 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 08:07:38.772 +02:00 [WRN] No type was specified for the decimal column 'BPFO' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 08:07:38.772 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 08:07:38.772 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 08:07:38.772 +02:00 [WRN] No type was specified for the decimal column 'BSF' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 08:07:38.772 +02:00 [WRN] No type was specified for the decimal column 'BSFAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 08:07:38.772 +02:00 [WRN] No type was specified for the decimal column 'BSFAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 08:07:38.772 +02:00 [WRN] No type was specified for the decimal column 'RmsAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 08:07:38.772 +02:00 [WRN] No type was specified for the decimal column 'RmsAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 08:07:38.772 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 08:07:38.772 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 08:07:38.812 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 08:07:52.135 +02:00 [INF] Executed DbCommand (132ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:07:52.523 +02:00 [INF] Executed DbCommand (153ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:07:52.790 +02:00 [INF] Executed DbCommand (92ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:07:53.034 +02:00 [INF] Executed DbCommand (77ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:08:06.552 +02:00 [INF] Executed DbCommand (116ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Alog], [s].[AxialRMS], [s].[OverallRMS], [s].[RadialRMS], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [m].[RmsAlarm], [m].[RmsAlert], [m].[TemperatureAlarm], [m].[TemperatureAlert]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:08:12.141 +02:00 [ERR] An exception occurred while iterating over the results of a query for context type 'BinmakAPI.Data.BinmakDbContext'.
System.Threading.ThreadAbortException: System error.
   at Microsoft.Data.SqlClient.SNINativeMethodWrapper.SNIReadSyncOverAsync(SNIHandle pConn, IntPtr& ppNewPacket, Int32 timeout)
   at Microsoft.Data.SqlClient.TdsParserStateObjectNative.ReadSyncOverAsync(Int32 timeoutRemaining, UInt32& error)
   at Microsoft.Data.SqlClient.TdsParserStateObject.ReadSniSyncOverAsync()
   at Microsoft.Data.SqlClient.TdsParserStateObject.TryReadNetworkPacket()
   at Microsoft.Data.SqlClient.TdsParserStateObject.TryPrepareBuffer()
   at Microsoft.Data.SqlClient.TdsParserStateObject.TryReadByteArray(Span`1 buff, Int32 len, Int32& totalRead)
   at Microsoft.Data.SqlClient.TdsParserStateObject.TryReadChar(Char& value)
   at Microsoft.Data.SqlClient.TdsParser.TryReadPlpUnicodeCharsChunk(Char[] buff, Int32 offst, Int32 len, TdsParserStateObject stateObj, Int32& charsRead)
   at Microsoft.Data.SqlClient.TdsParser.TryReadPlpUnicodeChars(Char[]& buff, Int32 offst, Int32 len, TdsParserStateObject stateObj, Int32& totalCharsRead)
   at Microsoft.Data.SqlClient.TdsParser.TryReadSqlStringValue(SqlBuffer value, Byte type, Int32 length, Encoding encoding, Boolean isPlp, TdsParserStateObject stateObj)
   at Microsoft.Data.SqlClient.TdsParser.TryReadSqlValue(SqlBuffer value, SqlMetaDataPriv md, Int32 length, TdsParserStateObject stateObj, SqlCommandColumnEncryptionSetting columnEncryptionOverride, String columnName)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadColumnData()
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadColumnInternal(Int32 i, Boolean readHeaderOnly)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadColumn(Int32 i, Boolean setTimeout, Boolean allowPartiallyReadColumn)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadColumn(Int32 i, Boolean setTimeout, Boolean allowPartiallyReadColumn)
   at Microsoft.Data.SqlClient.SqlDataReader.GetString(Int32 i)
   at lambda_method(Closure , QueryContext , DbDataReader , ResultContext , Int32[] , ResultCoordinator )
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
System.Threading.ThreadAbortException: System error.
   at Microsoft.Data.SqlClient.SNINativeMethodWrapper.SNIReadSyncOverAsync(SNIHandle pConn, IntPtr& ppNewPacket, Int32 timeout)
   at Microsoft.Data.SqlClient.TdsParserStateObjectNative.ReadSyncOverAsync(Int32 timeoutRemaining, UInt32& error)
   at Microsoft.Data.SqlClient.TdsParserStateObject.ReadSniSyncOverAsync()
   at Microsoft.Data.SqlClient.TdsParserStateObject.TryReadNetworkPacket()
   at Microsoft.Data.SqlClient.TdsParserStateObject.TryPrepareBuffer()
   at Microsoft.Data.SqlClient.TdsParserStateObject.TryReadByteArray(Span`1 buff, Int32 len, Int32& totalRead)
   at Microsoft.Data.SqlClient.TdsParserStateObject.TryReadChar(Char& value)
   at Microsoft.Data.SqlClient.TdsParser.TryReadPlpUnicodeCharsChunk(Char[] buff, Int32 offst, Int32 len, TdsParserStateObject stateObj, Int32& charsRead)
   at Microsoft.Data.SqlClient.TdsParser.TryReadPlpUnicodeChars(Char[]& buff, Int32 offst, Int32 len, TdsParserStateObject stateObj, Int32& totalCharsRead)
   at Microsoft.Data.SqlClient.TdsParser.TryReadSqlStringValue(SqlBuffer value, Byte type, Int32 length, Encoding encoding, Boolean isPlp, TdsParserStateObject stateObj)
   at Microsoft.Data.SqlClient.TdsParser.TryReadSqlValue(SqlBuffer value, SqlMetaDataPriv md, Int32 length, TdsParserStateObject stateObj, SqlCommandColumnEncryptionSetting columnEncryptionOverride, String columnName)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadColumnData()
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadColumnInternal(Int32 i, Boolean readHeaderOnly)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadColumn(Int32 i, Boolean setTimeout, Boolean allowPartiallyReadColumn)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadColumn(Int32 i, Boolean setTimeout, Boolean allowPartiallyReadColumn)
   at Microsoft.Data.SqlClient.SqlDataReader.GetString(Int32 i)
   at lambda_method(Closure , QueryContext , DbDataReader , ResultContext , Int32[] , ResultCoordinator )
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
2020-09-22 08:08:23.673 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.Areas.AssetHealth.Models.Local.MachineDetail'.
2020-09-22 08:08:23.729 +02:00 [ERR] Failed executing DbCommand (41ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Alog], [s].[AxialRMS], [s].[OverallRMS], [s].[RadialRMS], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [m].[RmsAlarm], [m].[RmsAlert], [m].[TemperatureAlarm], [m].[TemperatureAlert]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:08:23.735 +02:00 [ERR] An exception occurred while iterating over the results of a query for context type 'BinmakAPI.Data.BinmakDbContext'.
System.InvalidOperationException: There is already an open DataReader associated with this Command which must be closed first.
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds.ValidateConnectionForExecute(SqlCommand command)
   at Microsoft.Data.SqlClient.SqlConnection.ValidateConnectionForExecute(String method, SqlCommand command)
   at Microsoft.Data.SqlClient.SqlCommand.ValidateCommand(Boolean isAsync, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at System.Data.Common.DbCommand.ExecuteReader()
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.InitializeReader(DbContext _, Boolean result)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
System.InvalidOperationException: There is already an open DataReader associated with this Command which must be closed first.
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds.ValidateConnectionForExecute(SqlCommand command)
   at Microsoft.Data.SqlClient.SqlConnection.ValidateConnectionForExecute(String method, SqlCommand command)
   at Microsoft.Data.SqlClient.SqlCommand.ValidateCommand(Boolean isAsync, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at System.Data.Common.DbCommand.ExecuteReader()
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.InitializeReader(DbContext _, Boolean result)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
2020-09-22 08:08:23.745 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 45908.3708ms
2020-09-22 08:08:23.747 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 08:08:23.748 +02:00 [ERR] An unhandled exception has occurred while executing the request.
System.InvalidOperationException: There is already an open DataReader associated with this Command which must be closed first.
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds.ValidateConnectionForExecute(SqlCommand command)
   at Microsoft.Data.SqlClient.SqlConnection.ValidateConnectionForExecute(String method, SqlCommand command)
   at Microsoft.Data.SqlClient.SqlCommand.ValidateCommand(Boolean isAsync, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at System.Data.Common.DbCommand.ExecuteReader()
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.InitializeReader(DbContext _, Boolean result)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.Serialize(JsonWriter jsonWriter, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|29_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2020-09-22 08:18:33.112 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 08:18:33.120 +02:00 [INF] CORS policy execution successful.
2020-09-22 08:18:33.121 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 08:18:33.122 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 08:18:33.157 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 08:18:33.643 +02:00 [INF] Executed DbCommand (94ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:18:34.084 +02:00 [INF] Executed DbCommand (153ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:18:34.406 +02:00 [INF] Executed DbCommand (79ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:18:34.886 +02:00 [INF] Executed DbCommand (168ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:18:59.268 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.Areas.AssetHealth.Models.Local.MachineDetail'.
2020-09-22 08:18:59.371 +02:00 [INF] Executed DbCommand (95ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Alog], [s].[AxialRMS], [s].[OverallRMS], [s].[RadialRMS], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [m].[RmsAlarm], [m].[RmsAlert], [m].[TemperatureAlarm], [m].[TemperatureAlert]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:19:04.334 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 08:19:04.335 +02:00 [INF] CORS policy execution successful.
2020-09-22 08:19:04.335 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 08:19:04.337 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 08:19:04.353 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 08:19:04.937 +02:00 [INF] Executed DbCommand (124ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:19:05.512 +02:00 [INF] Executed DbCommand (197ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:19:05.753 +02:00 [INF] Executed DbCommand (120ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:19:06.081 +02:00 [INF] Executed DbCommand (221ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:19:14.014 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.Areas.AssetHealth.Models.Local.MachineDetail'.
2020-09-22 08:19:14.099 +02:00 [INF] Executed DbCommand (79ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Alog], [s].[AxialRMS], [s].[OverallRMS], [s].[RadialRMS], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [m].[RmsAlarm], [m].[RmsAlert], [m].[TemperatureAlarm], [m].[TemperatureAlert]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:20:18.670 +02:00 [ERR] An exception occurred while iterating over the results of a query for context type 'BinmakAPI.Data.BinmakDbContext'.
System.ArgumentNullException: Value cannot be null. (Parameter 'value')
   at Newtonsoft.Json.JsonConvert.DeserializeObject(String value, Type type, JsonSerializerSettings settings)
   at Newtonsoft.Json.JsonConvert.DeserializeObject[T](String value, JsonSerializerSettings settings)
   at lambda_method(Closure , QueryContext , DbDataReader , ResultContext , Int32[] , ResultCoordinator )
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
System.ArgumentNullException: Value cannot be null. (Parameter 'value')
   at Newtonsoft.Json.JsonConvert.DeserializeObject(String value, Type type, JsonSerializerSettings settings)
   at Newtonsoft.Json.JsonConvert.DeserializeObject[T](String value, JsonSerializerSettings settings)
   at lambda_method(Closure , QueryContext , DbDataReader , ResultContext , Int32[] , ResultCoordinator )
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
2020-09-22 08:20:28.240 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 115117.451ms
2020-09-22 08:20:28.241 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 08:20:28.242 +02:00 [ERR] An unhandled exception has occurred while executing the request.
System.ArgumentNullException: Value cannot be null. (Parameter 'value')
   at Newtonsoft.Json.JsonConvert.DeserializeObject(String value, Type type, JsonSerializerSettings settings)
   at Newtonsoft.Json.JsonConvert.DeserializeObject[T](String value, JsonSerializerSettings settings)
   at lambda_method(Closure , QueryContext , DbDataReader , ResultContext , Int32[] , ResultCoordinator )
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.Serialize(JsonWriter jsonWriter, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|29_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2020-09-22 08:20:28.246 +02:00 [INF] Request finished in 115138.6095ms 500 text/plain
2020-09-22 08:20:31.107 +02:00 [ERR] An exception occurred while iterating over the results of a query for context type 'BinmakAPI.Data.BinmakDbContext'.
System.ArgumentNullException: Value cannot be null. (Parameter 'value')
   at Newtonsoft.Json.JsonConvert.DeserializeObject(String value, Type type, JsonSerializerSettings settings)
   at Newtonsoft.Json.JsonConvert.DeserializeObject[T](String value, JsonSerializerSettings settings)
   at lambda_method(Closure , QueryContext , DbDataReader , ResultContext , Int32[] , ResultCoordinator )
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
System.ArgumentNullException: Value cannot be null. (Parameter 'value')
   at Newtonsoft.Json.JsonConvert.DeserializeObject(String value, Type type, JsonSerializerSettings settings)
   at Newtonsoft.Json.JsonConvert.DeserializeObject[T](String value, JsonSerializerSettings settings)
   at lambda_method(Closure , QueryContext , DbDataReader , ResultContext , Int32[] , ResultCoordinator )
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
2020-09-22 08:20:39.381 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 95043.9926ms
2020-09-22 08:20:39.381 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 08:20:39.383 +02:00 [ERR] An unhandled exception has occurred while executing the request.
System.ArgumentNullException: Value cannot be null. (Parameter 'value')
   at Newtonsoft.Json.JsonConvert.DeserializeObject(String value, Type type, JsonSerializerSettings settings)
   at Newtonsoft.Json.JsonConvert.DeserializeObject[T](String value, JsonSerializerSettings settings)
   at lambda_method(Closure , QueryContext , DbDataReader , ResultContext , Int32[] , ResultCoordinator )
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.Serialize(JsonWriter jsonWriter, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|29_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2020-09-22 08:20:39.387 +02:00 [INF] Request finished in 95052.9846ms 500 text/plain
2020-09-22 08:31:06.992 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 08:31:06.993 +02:00 [INF] CORS policy execution successful.
2020-09-22 08:31:06.993 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 08:31:06.994 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 08:31:06.998 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 08:31:07.279 +02:00 [INF] Executed DbCommand (70ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:31:07.649 +02:00 [INF] Executed DbCommand (233ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:31:07.925 +02:00 [INF] Executed DbCommand (64ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:31:08.176 +02:00 [INF] Executed DbCommand (78ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:31:12.663 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.Areas.AssetHealth.Models.Local.MachineDetail'.
2020-09-22 08:31:12.729 +02:00 [INF] Executed DbCommand (62ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Alog], [s].[AxialRMS], [s].[OverallRMS], [s].[RadialRMS], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [m].[RmsAlarm], [m].[RmsAlert], [m].[TemperatureAlarm], [m].[TemperatureAlert]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 08:32:02.596 +02:00 [ERR] An exception occurred while iterating over the results of a query for context type 'BinmakAPI.Data.BinmakDbContext'.
System.ArgumentNullException: Value cannot be null. (Parameter 'value')
   at Newtonsoft.Json.JsonConvert.DeserializeObject(String value, Type type, JsonSerializerSettings settings)
   at Newtonsoft.Json.JsonConvert.DeserializeObject[T](String value, JsonSerializerSettings settings)
   at lambda_method(Closure , QueryContext , DbDataReader , ResultContext , Int32[] , ResultCoordinator )
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
System.ArgumentNullException: Value cannot be null. (Parameter 'value')
   at Newtonsoft.Json.JsonConvert.DeserializeObject(String value, Type type, JsonSerializerSettings settings)
   at Newtonsoft.Json.JsonConvert.DeserializeObject[T](String value, JsonSerializerSettings settings)
   at lambda_method(Closure , QueryContext , DbDataReader , ResultContext , Int32[] , ResultCoordinator )
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
2020-09-22 08:32:10.585 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 63590.7905ms
2020-09-22 08:32:10.585 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 08:32:10.587 +02:00 [ERR] An unhandled exception has occurred while executing the request.
System.ArgumentNullException: Value cannot be null. (Parameter 'value')
   at Newtonsoft.Json.JsonConvert.DeserializeObject(String value, Type type, JsonSerializerSettings settings)
   at Newtonsoft.Json.JsonConvert.DeserializeObject[T](String value, JsonSerializerSettings settings)
   at lambda_method(Closure , QueryContext , DbDataReader , ResultContext , Int32[] , ResultCoordinator )
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.Serialize(JsonWriter jsonWriter, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|29_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2020-09-22 08:32:10.598 +02:00 [INF] Request finished in 63608.2321ms 500 text/plain
2020-09-22 09:09:16.642 +02:00 [INF] User profile is available. Using 'C:\Users\Admin\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-09-22 09:09:18.999 +02:00 [INF] Application started. Press Ctrl+C to shut down.
2020-09-22 09:09:19.000 +02:00 [INF] Hosting environment: Development
2020-09-22 09:09:19.000 +02:00 [INF] Content root path: C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd
2020-09-22 09:09:19.269 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/weatherforecast  
2020-09-22 09:09:19.286 +02:00 [WRN] Failed to determine the https port for redirect.
2020-09-22 09:09:19.287 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 09:09:19.389 +02:00 [INF] CORS policy execution successful.
2020-09-22 09:09:19.403 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 09:09:19.405 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 09:09:19.587 +02:00 [INF] Route matched with {action = "Get", controller = "WeatherForecast", area = ""}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[BinmakBackEnd.WeatherForecast] Get() on controller BinmakBackEnd.Controllers.WeatherForecastController (BinmakBackEnd).
2020-09-22 09:09:19.587 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 09:09:19.604 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.WeatherForecast[]'.
2020-09-22 09:09:20.084 +02:00 [INF] Executed action BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd) in 489.4037ms
2020-09-22 09:09:20.086 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 09:09:20.170 +02:00 [INF] Request finished in 905.3035ms 200 application/json; charset=utf-8
2020-09-22 09:09:21.292 +02:00 [WRN] No type was specified for the decimal column 'BPFI' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:09:21.292 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:09:21.292 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:09:21.292 +02:00 [WRN] No type was specified for the decimal column 'BPFO' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:09:21.292 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:09:21.292 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:09:21.292 +02:00 [WRN] No type was specified for the decimal column 'BSF' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:09:21.292 +02:00 [WRN] No type was specified for the decimal column 'BSFAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:09:21.292 +02:00 [WRN] No type was specified for the decimal column 'BSFAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:09:21.292 +02:00 [WRN] No type was specified for the decimal column 'RmsAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:09:21.292 +02:00 [WRN] No type was specified for the decimal column 'RmsAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:09:21.292 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:09:21.292 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:09:21.332 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 09:09:22.760 +02:00 [INF] Executed DbCommand (144ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:09:23.019 +02:00 [INF] Executed DbCommand (77ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:09:23.117 +02:00 [INF] Executed DbCommand (78ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:09:23.216 +02:00 [INF] Executed DbCommand (71ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:09:32.131 +02:00 [INF] Executed DbCommand (79ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:10:04.428 +02:00 [INF] Executed DbCommand (77ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:10:35.265 +02:00 [INF] Executed DbCommand (236ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:11:01.559 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.Areas.AssetHealth.Models.Local.MachineDetail'.
2020-09-22 09:11:01.716 +02:00 [INF] Executed DbCommand (68ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Alog], [s].[AxialRMS], [s].[OverallRMS], [s].[RadialRMS], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [m].[RmsAlarm], [m].[RmsAlert], [m].[TemperatureAlarm], [m].[TemperatureAlert]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:11:47.663 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 148075.0501ms
2020-09-22 09:11:47.664 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 09:11:47.683 +02:00 [INF] Request finished in 148418.5466ms 200 application/json; charset=utf-8
2020-09-22 09:49:31.256 +02:00 [INF] User profile is available. Using 'C:\Users\Admin\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-09-22 09:49:33.455 +02:00 [INF] Application started. Press Ctrl+C to shut down.
2020-09-22 09:49:33.456 +02:00 [INF] Hosting environment: Development
2020-09-22 09:49:33.456 +02:00 [INF] Content root path: C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd
2020-09-22 09:49:33.731 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/weatherforecast  
2020-09-22 09:49:33.750 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 09:49:33.781 +02:00 [WRN] Failed to determine the https port for redirect.
2020-09-22 09:49:33.908 +02:00 [INF] CORS policy execution successful.
2020-09-22 09:49:33.922 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 09:49:33.923 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 09:49:34.088 +02:00 [INF] Route matched with {action = "Get", controller = "WeatherForecast", area = ""}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[BinmakBackEnd.WeatherForecast] Get() on controller BinmakBackEnd.Controllers.WeatherForecastController (BinmakBackEnd).
2020-09-22 09:49:34.088 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 09:49:34.097 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.WeatherForecast[]'.
2020-09-22 09:49:34.598 +02:00 [INF] Executed action BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd) in 503.3866ms
2020-09-22 09:49:34.600 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 09:49:34.622 +02:00 [INF] Request finished in 894.0513ms 200 application/json; charset=utf-8
2020-09-22 09:49:35.583 +02:00 [WRN] No type was specified for the decimal column 'BPFI' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:49:35.583 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:49:35.583 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:49:35.583 +02:00 [WRN] No type was specified for the decimal column 'BPFO' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:49:35.583 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:49:35.583 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:49:35.583 +02:00 [WRN] No type was specified for the decimal column 'BSF' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:49:35.583 +02:00 [WRN] No type was specified for the decimal column 'BSFAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:49:35.583 +02:00 [WRN] No type was specified for the decimal column 'BSFAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:49:35.583 +02:00 [WRN] No type was specified for the decimal column 'RmsAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:49:35.583 +02:00 [WRN] No type was specified for the decimal column 'RmsAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:49:35.583 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:49:35.584 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 09:49:35.621 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 09:49:37.213 +02:00 [INF] Executed DbCommand (217ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:49:37.546 +02:00 [INF] Executed DbCommand (61ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:49:37.803 +02:00 [INF] Executed DbCommand (78ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:49:38.046 +02:00 [INF] Executed DbCommand (78ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:49:38.281 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.Areas.AssetHealth.Models.Local.MachineDetail'.
2020-09-22 09:49:38.445 +02:00 [INF] Executed DbCommand (77ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Alog], [s].[AxialRMS], [s].[OverallRMS], [s].[RadialRMS], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [m].[RmsAlarm], [m].[RmsAlert], [m].[TemperatureAlarm], [m].[TemperatureAlert]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:50:21.121 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 47032.0592ms
2020-09-22 09:50:21.123 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 09:50:21.152 +02:00 [INF] Request finished in 47425.0914ms 200 application/json; charset=utf-8
2020-09-22 09:58:51.720 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 09:58:51.796 +02:00 [INF] CORS policy execution successful.
2020-09-22 09:58:51.797 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 09:58:51.982 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 09:58:52.273 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 09:58:52.645 +02:00 [INF] Executed DbCommand (69ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:58:52.821 +02:00 [INF] Executed DbCommand (77ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:58:52.978 +02:00 [INF] Executed DbCommand (85ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:58:53.177 +02:00 [INF] Executed DbCommand (84ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:58:53.396 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.Areas.AssetHealth.Models.Local.MachineDetail'.
2020-09-22 09:58:53.570 +02:00 [INF] Executed DbCommand (67ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Alog], [s].[AxialRMS], [s].[OverallRMS], [s].[RadialRMS], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [m].[RmsAlarm], [m].[RmsAlert], [m].[TemperatureAlarm], [m].[TemperatureAlert]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 09:59:42.524 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 50541.5833ms
2020-09-22 09:59:42.525 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 09:59:42.526 +02:00 [INF] Request finished in 50834.8286ms 200 application/json; charset=utf-8
2020-09-22 15:16:18.090 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/  
2020-09-22 15:16:18.113 +02:00 [INF] Request finished in 23.1494ms 404 
2020-09-22 15:16:31.145 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/swagger/index.html  
2020-09-22 15:16:31.481 +02:00 [INF] Request finished in 336.5183ms 200 text/html;charset=utf-8
2020-09-22 15:16:31.914 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/swagger/v1/swagger.json  
2020-09-22 15:16:32.513 +02:00 [INF] Request finished in 598.9787ms 200 application/json;charset=utf-8
2020-09-22 15:18:57.530 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 15:18:57.531 +02:00 [INF] CORS policy execution successful.
2020-09-22 15:18:57.531 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 15:18:57.532 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 15:18:57.583 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 15:18:58.878 +02:00 [INF] Executed DbCommand (116ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 15:19:18.627 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 21094.3904ms
2020-09-22 15:19:18.661 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 15:19:18.663 +02:00 [ERR] An unhandled exception has occurred while executing the request.
System.InvalidOperationException: Sequence contains no elements
   at System.Linq.ThrowHelper.ThrowNoElementsException()
   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)
   at System.Linq.Queryable.First[TSource](IQueryable`1 source)
   at BinmakBackEnd.Areas.AssetHealth.Models.Respositories.SensorDataRepository.FindByMachineId(SearchMachineRequest request) in C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd\Areas\AssetHealth\Models\Respositories\SensorDataRepository.cs:line 28
   at BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId(SearchMachineRequest request) in C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd\Areas\AssetHealth\Controllers\SensorDataController.cs:line 23
   at lambda_method(Closure , Object , Object[] )
   at Microsoft.Extensions.Internal.ObjectMethodExecutor.Execute(Object target, Object[] parameters)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2020-09-22 15:19:19.634 +02:00 [INF] Request finished in 22103.8158ms 500 text/plain
2020-09-22 15:19:31.831 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 15:19:31.832 +02:00 [INF] CORS policy execution successful.
2020-09-22 15:19:31.832 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 15:19:31.833 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 15:19:31.836 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 15:19:32.155 +02:00 [INF] Executed DbCommand (315ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 15:19:38.942 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 7109.398ms
2020-09-22 15:19:38.943 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 15:19:38.944 +02:00 [ERR] An unhandled exception has occurred while executing the request.
System.InvalidOperationException: Sequence contains no elements
   at System.Linq.ThrowHelper.ThrowNoElementsException()
   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)
   at System.Linq.Queryable.First[TSource](IQueryable`1 source)
   at BinmakBackEnd.Areas.AssetHealth.Models.Respositories.SensorDataRepository.FindByMachineId(SearchMachineRequest request) in C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd\Areas\AssetHealth\Models\Respositories\SensorDataRepository.cs:line 28
   at BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId(SearchMachineRequest request) in C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd\Areas\AssetHealth\Controllers\SensorDataController.cs:line 23
   at lambda_method(Closure , Object , Object[] )
   at Microsoft.Extensions.Internal.ObjectMethodExecutor.Execute(Object target, Object[] parameters)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2020-09-22 15:19:38.951 +02:00 [INF] Request finished in 7117.8354ms 500 text/plain
2020-09-22 15:19:42.335 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 15:19:42.336 +02:00 [INF] CORS policy execution successful.
2020-09-22 15:19:42.336 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 15:19:42.336 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 15:19:42.339 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 15:20:19.948 +02:00 [INF] Executed DbCommand (2,310ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 15:20:34.706 +02:00 [INF] Executed DbCommand (394ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 15:20:47.691 +02:00 [INF] Executed DbCommand (106ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 15:21:47.470 +02:00 [INF] User profile is available. Using 'C:\Users\Admin\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-09-22 15:21:48.077 +02:00 [INF] Application started. Press Ctrl+C to shut down.
2020-09-22 15:21:48.078 +02:00 [INF] Hosting environment: Development
2020-09-22 15:21:48.078 +02:00 [INF] Content root path: C:\Users\Admin\Documents\Projects\Load And Haul\Hundumo\BinmakBackEnd
2020-09-22 15:21:48.131 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/weatherforecast  
2020-09-22 15:21:48.138 +02:00 [WRN] Failed to determine the https port for redirect.
2020-09-22 15:21:48.223 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 15:21:48.246 +02:00 [INF] Route matched with {action = "Get", controller = "WeatherForecast", area = ""}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[BinmakBackEnd.WeatherForecast] Get() on controller BinmakBackEnd.Controllers.WeatherForecastController (BinmakBackEnd).
2020-09-22 15:21:48.251 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.WeatherForecast[]'.
2020-09-22 15:21:48.480 +02:00 [INF] Executed action BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd) in 229.7202ms
2020-09-22 15:21:48.483 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Controllers.WeatherForecastController.Get (BinmakBackEnd)'
2020-09-22 15:21:48.489 +02:00 [INF] Request finished in 361.309ms 200 application/json; charset=utf-8
2020-09-22 15:21:48.548 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:44318/favicon.ico  
2020-09-22 15:21:48.555 +02:00 [INF] Request finished in 6.6654ms 404 
2020-09-22 15:21:56.061 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 15:21:56.065 +02:00 [INF] CORS policy execution successful.
2020-09-22 15:21:56.067 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 15:21:56.078 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 15:21:57.024 +02:00 [WRN] No type was specified for the decimal column 'BPFI' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 15:21:57.024 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 15:21:57.024 +02:00 [WRN] No type was specified for the decimal column 'BPFIAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 15:21:57.024 +02:00 [WRN] No type was specified for the decimal column 'BPFO' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 15:21:57.024 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 15:21:57.024 +02:00 [WRN] No type was specified for the decimal column 'BPFOAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 15:21:57.024 +02:00 [WRN] No type was specified for the decimal column 'BSF' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 15:21:57.024 +02:00 [WRN] No type was specified for the decimal column 'BSFAlarm' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 15:21:57.024 +02:00 [WRN] No type was specified for the decimal column 'BSFAlert' on entity type 'Bearing'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 15:21:57.024 +02:00 [WRN] No type was specified for the decimal column 'RmsAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 15:21:57.025 +02:00 [WRN] No type was specified for the decimal column 'RmsAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 15:21:57.025 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlarm' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 15:21:57.025 +02:00 [WRN] No type was specified for the decimal column 'TemperatureAlert' on entity type 'Machine'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'HasColumnType()'.
2020-09-22 15:21:57.061 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 15:21:58.952 +02:00 [INF] Executed DbCommand (190ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [SensorData] AS [s]
        WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2020-09-22 15:21:58.978 +02:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2020-09-22 15:21:58.981 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 2902.965ms
2020-09-22 15:21:58.981 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 15:21:58.985 +02:00 [INF] Request finished in 2926.2347ms 404 text/plain; charset=utf-8
2020-09-22 15:22:12.624 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 15:22:12.630 +02:00 [INF] CORS policy execution successful.
2020-09-22 15:22:12.631 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 15:22:12.631 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 15:22:12.670 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 15:22:13.043 +02:00 [INF] Executed DbCommand (366ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [SensorData] AS [s]
        WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2020-09-22 15:22:13.044 +02:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2020-09-22 15:22:13.045 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 413.2051ms
2020-09-22 15:22:13.045 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 15:22:13.045 +02:00 [INF] Request finished in 421.7842ms 404 text/plain; charset=utf-8
2020-09-22 15:22:19.111 +02:00 [INF] Request starting HTTP/1.1 POST http://localhost:44318/api/v1/SensorData/machine application/json-patch+json 89
2020-09-22 15:22:19.112 +02:00 [INF] CORS policy execution successful.
2020-09-22 15:22:19.112 +02:00 [INF] Executing endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 15:22:19.113 +02:00 [INF] Route matched with {action = "GetByDeviceId", controller = "SensorData", area = ""}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetByDeviceId(BinmakBackEnd.Areas.AssetHealth.Models.Local.SearchMachineRequest) on controller BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController (BinmakBackEnd).
2020-09-22 15:22:19.132 +02:00 [INF] Entity Framework Core 3.1.6 initialized 'BinmakDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
2020-09-22 15:22:22.203 +02:00 [INF] Executed DbCommand (3,059ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [SensorData] AS [s]
        WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2020-09-22 15:22:33.113 +02:00 [INF] Executed DbCommand (6,756ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 15:22:35.245 +02:00 [INF] Executed DbCommand (343ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 15:22:36.372 +02:00 [INF] Executed DbCommand (83ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 15:22:37.927 +02:00 [INF] Executed DbCommand (480ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Alog], [s].[AxialRMS], [s].[BatCap], [s].[BatSOC], [s].[BatTTE], [s].[DeviceId], [s].[FFT], [s].[MachineId], [s].[OverallRMS], [s].[RadialRMS], [s].[RegiDate], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [s].[Waveform], [m].[Id], [m].[AssetNodeId], [m].[BBSSDeviceId], [m].[ConditionId], [m].[Criticality], [m].[DeviceId], [m].[DrivingEndId], [m].[FrequencyPeriodId], [m].[ImageUrl], [m].[InsulationLevelId], [m].[MachineLoadId], [m].[MachineTypeId], [m].[Name], [m].[NonDrivingEndId], [m].[RevolutionPerMinute], [m].[RmsAlarm], [m].[RmsAlert], [m].[SizeCategoryId], [m].[TemperatureAlarm], [m].[TemperatureAlert], [a].[AssetNodeId], [a].[Address], [a].[Address2], [a].[AssetNodeTypeId], [a].[City], [a].[Code], [a].[CountryId], [a].[DateStamp], [a].[Description], [a].[Height], [a].[IsParentAddress], [a].[LastEditedBy], [a].[LastEditedDate], [a].[Name], [a].[ParentAssetNodeId], [a].[Reference], [a].[RootAssetNodeId], [a].[Zip], [f].[Id], [f].[Description], [f].[Name]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
INNER JOIN [AssetNodes] AS [a] ON [m].[AssetNodeId] = [a].[AssetNodeId]
INNER JOIN [FrequencyPeriods] AS [f] ON [m].[FrequencyPeriodId] = [f].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 15:22:38.582 +02:00 [INF] Executing ObjectResult, writing value of type 'BinmakBackEnd.Areas.AssetHealth.Models.Local.MachineDetail'.
2020-09-22 15:22:38.808 +02:00 [INF] Executed DbCommand (166ms) [Parameters=[@__request_MachineId_0='?' (DbType = Int32), @__p_1='?' (DbType = Double), @__p_2='?' (DbType = Double)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Alog], [s].[AxialRMS], [s].[OverallRMS], [s].[RadialRMS], [s].[TangentialRMS], [s].[Temperature], [s].[TimeStamp], [m].[RmsAlarm], [m].[RmsAlert], [m].[TemperatureAlarm], [m].[TemperatureAlert]
FROM [SensorData] AS [s]
INNER JOIN [Machines] AS [m] ON [s].[MachineId] = [m].[Id]
WHERE (([s].[MachineId] = @__request_MachineId_0) AND ([s].[TimeStamp] >= @__p_1)) AND ([s].[TimeStamp] <= @__p_2)
ORDER BY [s].[TimeStamp]
2020-09-22 15:23:36.455 +02:00 [INF] Executed action BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd) in 77340.935ms
2020-09-22 15:23:36.456 +02:00 [INF] Executed endpoint 'BinmakBackEnd.Areas.AssetHealth.Controllers.SensorDataController.GetByDeviceId (BinmakBackEnd)'
2020-09-22 15:23:36.459 +02:00 [INF] Request finished in 77347.9782ms 200 application/json; charset=utf-8
