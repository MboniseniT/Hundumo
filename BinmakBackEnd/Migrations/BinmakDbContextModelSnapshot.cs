// <auto-generated />
using System;
using BinmakAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BinmakBackEnd.Migrations
{
    [DbContext(typeof(BinmakDbContext))]
    partial class BinmakDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BinmakAPI.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Zip")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BinmakAPI.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("BinmakAPI.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("BinmakAPI.Entities.Template", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TemplateId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.Assessments.Entities.Assessment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("assess_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("assess_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("assetNodeId")
                        .HasColumnType("int");

                    b.Property<int>("frmwrk_id")
                        .HasColumnType("int");

                    b.Property<string>("kpa1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kpa10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kpa11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kpa12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kpa13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kpa14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kpa15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kpa16")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kpa17")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kpa2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kpa3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kpa4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kpa5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kpa6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kpa7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kpa8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kpa9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("variant_id")
                        .HasColumnType("int");

                    b.Property<int>("version_id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("assessments");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.Assessments.Entities.AssessmentUsers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("assess_id")
                        .HasColumnType("int");

                    b.Property<int?>("isSaved")
                        .HasColumnType("int");

                    b.Property<string>("link_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("assessmentUsers");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.Assessments.Entities.Characteristics", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("frmwrk_id")
                        .HasColumnType("int");

                    b.Property<int>("kpa_id")
                        .HasColumnType("int");

                    b.Property<int>("level_id")
                        .HasColumnType("int");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("variant_id")
                        .HasColumnType("int");

                    b.Property<int>("version_id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("characteristics");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.Assessments.Entities.Frmwrks", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("frmwrks");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.Assessments.Entities.Kpas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("kpas");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.Assessments.Entities.Levels", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("levels");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.Assessments.Entities.Results", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("assess_id")
                        .HasColumnType("int");

                    b.Property<int>("characteristic_id")
                        .HasColumnType("int");

                    b.Property<int?>("kpa_id")
                        .HasColumnType("int");

                    b.Property<int?>("level_id")
                        .HasColumnType("int");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("results");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.Assessments.Entities.Variants", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("variants");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.Assessments.Entities.Versions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("versions");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.AssetCriticality.Entities.ActualAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Budget")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CapitalExpenditure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Community")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Compliance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DominantFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Environment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FailureFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Health")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Legal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingCost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductionVolume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectSchedule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reputation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Revenue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Risk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskRanking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Safety")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThresholdRiskBand")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActualAssessment");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.AssetCriticality.Entities.AssessmentReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Catastrophic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsequenceCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Minor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Serious")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssessmentReference");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.AssetCriticality.Entities.ConsequenceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConsequenceCategory");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.AssetCriticality.Entities.CriteriaRiskMatrix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConsequenceImpact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LikelihoodRanking")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CriteriaRiskMatrix");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.AssetCriticality.Entities.LikelihoodDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Likelihood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LikelihoodDescriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubstanceExposure")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LikelihoodDescriptions");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.AssetCriticality.Entities.RiskAcceptanceThreshold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RiskAcceptanceThresholds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThresholdRiskBand")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RiskAcceptanceThreshold");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.AssetCriticality.Entities.RiskAssessorLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RiskAssessorLogin");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.AssetCriticality.Entities.RiskDeterminationMatrix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Catastrophic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FailureFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Minor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Serious")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RiskDeterminationMatrix");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.ProductionFlow.Entities.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionIndex")
                        .HasColumnType("int");

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateProduction")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActionId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.ProductionFlow.Entities.ClientAsset", b =>
                {
                    b.Property<int>("ClientAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientAssetNameId")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientAssetId");

                    b.ToTable("ClientAssetNames");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.ProductionFlow.Entities.DailyTask", b =>
                {
                    b.Property<int>("DailyTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ActionIndex")
                        .HasColumnType("int");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("Budget")
                        .HasColumnType("int");

                    b.Property<string>("DailyTaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailyTaskValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateProduction")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskTarget")
                        .HasColumnType("int");

                    b.Property<int>("Threshold")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DailyTaskId");

                    b.ToTable("DailyTasks");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.ProductionFlow.Entities.FunctionUnit", b =>
                {
                    b.Property<int>("FunctionUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("ClientAssetNameId")
                        .HasColumnType("int");

                    b.Property<string>("FunctionUnitName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FunctionUnitId");

                    b.ToTable("FunctionUnits");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.ProductionFlow.Entities.FunctionUnitChildren", b =>
                {
                    b.Property<int>("FunctionUnitChildrenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("Budget")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BudgetColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BudgetIsBackground")
                        .HasColumnType("bit");

                    b.Property<int>("ClientAssetNameId")
                        .HasColumnType("int");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionChildrenBachgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionChildrenColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionUnitChildrenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FunctionUnitId")
                        .HasColumnType("int");

                    b.Property<string>("MeasurementUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonthlyTarget")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonthlyTargetColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MonthlyTargetIsBackground")
                        .HasColumnType("bit");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TargetIsBackground")
                        .HasColumnType("bit");

                    b.Property<string>("Threshold")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThresholdColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ThresholdIsBackground")
                        .HasColumnType("bit");

                    b.HasKey("FunctionUnitChildrenId");

                    b.ToTable("FunctionUnitChildrens");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.ProductionFlow.Entities.ProductionFlowAsset", b =>
                {
                    b.Property<int>("ProductionFlowAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("ClientAssetNameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SinceDateProduction")
                        .HasColumnType("datetime2");

                    b.Property<string>("SiteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("ProductionFlowAssetId");

                    b.ToTable("ProductionFlowAssets");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.ProductionFlow.Entities.ProductionFlowAssetUser", b =>
                {
                    b.Property<int>("ProductionFlowAssetUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDrillAndBlast")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEquipmentStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFacePreparation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLoadAndHaul")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOverallProductionBuffer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOverallProductionProcess")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShe")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupport")
                        .HasColumnType("bit");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductionFlowAssetUserId");

                    b.ToTable("ProductionFlowAssetUsers");
                });

            modelBuilder.Entity("BinmakBackEnd.Areas.ProductionFlow.Entities.Reading", b =>
                {
                    b.Property<int>("ReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("Bolters")
                        .HasColumnType("int");

                    b.Property<int>("BoltersBudget")
                        .HasColumnType("int");

                    b.Property<int>("BoltersFrequency")
                        .HasColumnType("int");

                    b.Property<int>("BoltersMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("BoltersTarget")
                        .HasColumnType("int");

                    b.Property<int>("BoltersThreshold")
                        .HasColumnType("int");

                    b.Property<string>("BoltersUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateProduction")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day1st4HoursEnds")
                        .HasColumnType("int");

                    b.Property<int>("Day1st4HoursEndsBudget")
                        .HasColumnType("int");

                    b.Property<int>("Day1st4HoursEndsFrequency")
                        .HasColumnType("int");

                    b.Property<int>("Day1st4HoursEndsMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("Day1st4HoursEndsTarget")
                        .HasColumnType("int");

                    b.Property<int>("Day1st4HoursEndsThreshold")
                        .HasColumnType("int");

                    b.Property<string>("Day1st4HoursEndsUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Drifters")
                        .HasColumnType("int");

                    b.Property<int>("DriftersBudget")
                        .HasColumnType("int");

                    b.Property<int>("DriftersFrequency")
                        .HasColumnType("int");

                    b.Property<int>("DriftersMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("DriftersTarget")
                        .HasColumnType("int");

                    b.Property<int>("DriftersThreshold")
                        .HasColumnType("int");

                    b.Property<string>("DriftersUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrillRigs")
                        .HasColumnType("int");

                    b.Property<int>("DrillRigsBudget")
                        .HasColumnType("int");

                    b.Property<int>("DrillRigsFrequency")
                        .HasColumnType("int");

                    b.Property<int>("DrillRigsMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("DrillRigsTarget")
                        .HasColumnType("int");

                    b.Property<int>("DrillRigsThreshold")
                        .HasColumnType("int");

                    b.Property<string>("DrillRigsUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DumpTrucks")
                        .HasColumnType("int");

                    b.Property<int>("DumpTrucksBudget")
                        .HasColumnType("int");

                    b.Property<int>("DumpTrucksFrequency")
                        .HasColumnType("int");

                    b.Property<int>("DumpTrucksMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("DumpTrucksTarget")
                        .HasColumnType("int");

                    b.Property<int>("DumpTrucksThreshold")
                        .HasColumnType("int");

                    b.Property<string>("DumpTrucksUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndsBlasted")
                        .HasColumnType("int");

                    b.Property<int>("EndsBlastedBudget")
                        .HasColumnType("int");

                    b.Property<int>("EndsBlastedFrequency")
                        .HasColumnType("int");

                    b.Property<int>("EndsBlastedMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("EndsBlastedTarget")
                        .HasColumnType("int");

                    b.Property<int>("EndsBlastedThreshold")
                        .HasColumnType("int");

                    b.Property<string>("EndsBlastedUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndsDrilled")
                        .HasColumnType("int");

                    b.Property<int>("EndsDrilledBudget")
                        .HasColumnType("int");

                    b.Property<int>("EndsDrilledFrequency")
                        .HasColumnType("int");

                    b.Property<int>("EndsDrilledMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("EndsDrilledTarget")
                        .HasColumnType("int");

                    b.Property<int>("EndsDrilledThreshold")
                        .HasColumnType("int");

                    b.Property<string>("EndsDrilledUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndsLashed")
                        .HasColumnType("int");

                    b.Property<int>("EndsLashedBudget")
                        .HasColumnType("int");

                    b.Property<int>("EndsLashedFrequency")
                        .HasColumnType("int");

                    b.Property<int>("EndsLashedMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("EndsLashedTarget")
                        .HasColumnType("int");

                    b.Property<int>("EndsLashedThreshold")
                        .HasColumnType("int");

                    b.Property<string>("EndsLashedUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndsPrepared")
                        .HasColumnType("int");

                    b.Property<int>("EndsPreparedBudget")
                        .HasColumnType("int");

                    b.Property<int>("EndsPreparedFrequency")
                        .HasColumnType("int");

                    b.Property<int>("EndsPreparedMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("EndsPreparedTarget")
                        .HasColumnType("int");

                    b.Property<int>("EndsPreparedThreshold")
                        .HasColumnType("int");

                    b.Property<string>("EndsPreparedUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndsSupported")
                        .HasColumnType("int");

                    b.Property<int>("EndsSupportedBudget")
                        .HasColumnType("int");

                    b.Property<int>("EndsSupportedFrequency")
                        .HasColumnType("int");

                    b.Property<int>("EndsSupportedMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("EndsSupportedTarget")
                        .HasColumnType("int");

                    b.Property<int>("EndsSupportedThreshold")
                        .HasColumnType("int");

                    b.Property<string>("EndsSupportedUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HoistedTons")
                        .HasColumnType("int");

                    b.Property<int>("HoistedTonsBudget")
                        .HasColumnType("int");

                    b.Property<int>("HoistedTonsFrequency")
                        .HasColumnType("int");

                    b.Property<int>("HoistedTonsMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("HoistedTonsTarget")
                        .HasColumnType("int");

                    b.Property<int>("HoistedTonsThreshold")
                        .HasColumnType("int");

                    b.Property<string>("HoistedTonsUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<int>("LHDs")
                        .HasColumnType("int");

                    b.Property<int>("LHDsBudget")
                        .HasColumnType("int");

                    b.Property<int>("LHDsFrequency")
                        .HasColumnType("int");

                    b.Property<int>("LHDsMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("LHDsTarget")
                        .HasColumnType("int");

                    b.Property<int>("LHDsThreshold")
                        .HasColumnType("int");

                    b.Property<string>("LHDsUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LashedPreparedForSupport")
                        .HasColumnType("int");

                    b.Property<int>("LashedPreparedForSupportBudget")
                        .HasColumnType("int");

                    b.Property<int>("LashedPreparedForSupportFrequency")
                        .HasColumnType("int");

                    b.Property<int>("LashedPreparedForSupportMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("LashedPreparedForSupportTarget")
                        .HasColumnType("int");

                    b.Property<int>("LashedPreparedForSupportThreshold")
                        .HasColumnType("int");

                    b.Property<string>("LashedPreparedForSupportUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MuckbayTons")
                        .HasColumnType("int");

                    b.Property<int>("MuckbayTonsBudget")
                        .HasColumnType("int");

                    b.Property<int>("MuckbayTonsFrequency")
                        .HasColumnType("int");

                    b.Property<int>("MuckbayTonsMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("MuckbayTonsTarget")
                        .HasColumnType("int");

                    b.Property<int>("MuckbayTonsThreshold")
                        .HasColumnType("int");

                    b.Property<string>("MuckbayTonsUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Night1st4HoursEnds")
                        .HasColumnType("int");

                    b.Property<int>("Night1st4HoursEndsBudget")
                        .HasColumnType("int");

                    b.Property<int>("Night1st4HoursEndsFrequency")
                        .HasColumnType("int");

                    b.Property<int>("Night1st4HoursEndsMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("Night1st4HoursEndsTarget")
                        .HasColumnType("int");

                    b.Property<int>("Night1st4HoursEndsThreshold")
                        .HasColumnType("int");

                    b.Property<string>("Night1st4HoursEndsUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreparedMarkedEnds")
                        .HasColumnType("int");

                    b.Property<int>("PreparedMarkedEndsBudget")
                        .HasColumnType("int");

                    b.Property<int>("PreparedMarkedEndsFrequency")
                        .HasColumnType("int");

                    b.Property<int>("PreparedMarkedEndsMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("PreparedMarkedEndsTarget")
                        .HasColumnType("int");

                    b.Property<int>("PreparedMarkedEndsThreshold")
                        .HasColumnType("int");

                    b.Property<string>("PreparedMarkedEndsUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("She")
                        .HasColumnType("int");

                    b.Property<int>("SheBudget")
                        .HasColumnType("int");

                    b.Property<int>("SheFrequency")
                        .HasColumnType("int");

                    b.Property<int>("SheMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("SheTarget")
                        .HasColumnType("int");

                    b.Property<int>("SheThreshold")
                        .HasColumnType("int");

                    b.Property<string>("SheUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupportedEnds")
                        .HasColumnType("int");

                    b.Property<int>("SupportedEndsBudget")
                        .HasColumnType("int");

                    b.Property<int>("SupportedEndsFrequency")
                        .HasColumnType("int");

                    b.Property<int>("SupportedEndsMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("SupportedEndsTarget")
                        .HasColumnType("int");

                    b.Property<int>("SupportedEndsThreshold")
                        .HasColumnType("int");

                    b.Property<string>("SupportedEndsUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalCleanedEnds")
                        .HasColumnType("int");

                    b.Property<int>("TotalCleanedEndsBudget")
                        .HasColumnType("int");

                    b.Property<int>("TotalCleanedEndsFrequency")
                        .HasColumnType("int");

                    b.Property<int>("TotalCleanedEndsMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("TotalCleanedEndsTarget")
                        .HasColumnType("int");

                    b.Property<int>("TotalCleanedEndsThreshold")
                        .HasColumnType("int");

                    b.Property<string>("TotalCleanedEndsUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UGCrusherBin")
                        .HasColumnType("int");

                    b.Property<int>("UGCrusherBinBudget")
                        .HasColumnType("int");

                    b.Property<int>("UGCrusherBinFrequency")
                        .HasColumnType("int");

                    b.Property<int>("UGCrusherBinMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("UGCrusherBinTarget")
                        .HasColumnType("int");

                    b.Property<int>("UGCrusherBinThreshold")
                        .HasColumnType("int");

                    b.Property<string>("UGCrusherBinUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnlashedEnds")
                        .HasColumnType("int");

                    b.Property<int>("UnlashedEndsBudget")
                        .HasColumnType("int");

                    b.Property<int>("UnlashedEndsFrequency")
                        .HasColumnType("int");

                    b.Property<int>("UnlashedEndsMonthTarget")
                        .HasColumnType("int");

                    b.Property<int>("UnlashedEndsTarget")
                        .HasColumnType("int");

                    b.Property<int>("UnlashedEndsThreshold")
                        .HasColumnType("int");

                    b.Property<string>("UnlashedEndsUnit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReadingId");

                    b.ToTable("Readings");
                });

            modelBuilder.Entity("BinmakBackEnd.Entities.AssetNode", b =>
                {
                    b.Property<int>("AssetNodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssetNodeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsParentAddress")
                        .HasColumnType("bit");

                    b.Property<string>("LastEditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentAssetNodeId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RootAssetNodeId")
                        .HasColumnType("int");

                    b.Property<int>("Zip")
                        .HasColumnType("int");

                    b.HasKey("AssetNodeId");

                    b.ToTable("AssetNodes");
                });

            modelBuilder.Entity("BinmakBackEnd.Entities.AssetNodeType", b =>
                {
                    b.Property<int>("AssetNodeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssetNodeTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetNodeTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetNodeTypeId");

                    b.ToTable("AssetNodeTypes");
                });

            modelBuilder.Entity("BinmakBackEnd.Entities.AssetUser", b =>
                {
                    b.Property<int>("AssetUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetNodeId")
                        .HasColumnType("int");

                    b.Property<int>("AssetNodeTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAssetAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetUserId");

                    b.ToTable("AssetUsers");
                });

            modelBuilder.Entity("BinmakBackEnd.Entities.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsParentAddress")
                        .HasColumnType("bit");

                    b.Property<string>("LastEditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentEquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("ProductiveUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RootEquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("RootOrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("Zip")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("BinmakBackEnd.Entities.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsParentAddress")
                        .HasColumnType("bit");

                    b.Property<string>("LastEditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RootOrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("Zip")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("BinmakBackEnd.Entities.ProductiveUnit", b =>
                {
                    b.Property<int>("ProductiveUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsParentAddress")
                        .HasColumnType("bit");

                    b.Property<string>("LastEditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("ParentProductiveUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RootOrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("Zip")
                        .HasColumnType("int");

                    b.HasKey("ProductiveUnitId");

                    b.ToTable("ProductiveUnits");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BinmakAPI.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BinmakAPI.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BinmakAPI.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BinmakAPI.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
